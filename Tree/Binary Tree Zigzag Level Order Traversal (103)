/**
 *Solution 1: use stack
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Stack<TreeNode> stack = new Stack<TreeNode>();
        boolean order = true;
        if (root == null) return res;
        stack.push(root);
        while (!stack.isEmpty()) {
            Stack<TreeNode> tmpStack = new Stack<TreeNode>();
            List<Integer> list = new ArrayList<Integer>();
            while (!stack.isEmpty()) {
                TreeNode node = stack.pop();
                list.add(node.val);
                if (order) {//如果是正方向就从左到右加入新元素，否则从右到左加入新元素
                    if (node.left != null) tmpStack.push(node.left);
                    if (node.right != null) tmpStack.push(node.right);
                } else {
                    if (node.right != null) tmpStack.push(node.right);
                    if (node.left != null) tmpStack.push(node.left);
                }
            }
            stack = tmpStack; //这种方法不好的地方就是要用到额外的tmpStack的空间
            res.add(list);
            order = !order;
        }
        return res;
    }
}

/**
 *Solution 2: 用queue
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> zigzagLevelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>();
        boolean order = true;
        if (root == null) return res;
        queue.offer(root);
        while (!queue.isEmpty()) {
            List<Integer> list = new ArrayList<Integer>();
            int len = queue.size();
            for (int i = 0; i < len; i++) {
                TreeNode node = queue.poll();
                if (order) list.add(node.val); //注意：如果是正方向就正着加入【list】(不是queue!!);否则从0下标插入新的值
                else list.add(0, node.val);
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }
            res.add(list);
            order = !order;
        }
        return res;
    }
}
 
