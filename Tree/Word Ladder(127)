/**
*思路：BFS，如果每层距离为1，那么BFS是很好的解决距离问题的方法
*找出每一层当前单词只相差1个字母的单词，然后加到下一层里面去——但是
*一开始这一个步骤我是遍历了curList和所有wordList的单词，相当于O(n^2)的复杂度
*所以更快的做法是把当前单词的每一个位置的字母换成'a'-'z'的任意字母，看这个新单词是否出现在dic里，如果在的话，就加入下一层，同时删除dic里的这个单词
*为什么要把wordList转换成一个dic的set:如果不转的话是过不了的，可能list.contains()是一个顺序查找？
*/
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String> set = new HashSet<String>(wordList);
        Queue<String> queue = new LinkedList<String>();
        int cnt = 2;
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            int len = queue.size(); //细节，先获取本轮要取出的word的len
            for (int i = 0; i < len; i++) {
                String word = queue.poll();
                for (int j = 0; j < word.length(); j++) {
                    char[] arr = word.toCharArray();
                    for (char ch = 'a'; ch <= 'z'; ch++) {//细节！！for循环还能用于char!!!
                        arr[j] = ch;
                        String str = String.valueOf(arr);
                        if(set.contains(str)) {
                            if (str.equals(endWord)) return cnt;
                            queue.offer(str);
                            set.remove(str);
                        }
                    }    
                }
            }
            cnt++;
        }
        return 0;
    }
}

/**
 *同样的思路用StringBuilder
 */
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        HashSet<String> set = new HashSet<String>(wordList);
        Queue<String> queue = new LinkedList<String>();
        int cnt = 2;
        queue.offer(beginWord);
        while (!queue.isEmpty()) {
            int len = queue.size(); 
            for (int i = 0; i < len; i++) {
                String word = queue.poll();
                for (int j = 0; j < word.length(); j++) {
                    StringBuilder sb = new StringBuilder(word); //注意sb不能再外面那层定义，否则会因为引用变量影响全局！！
                    for (char ch = 'a'; ch <= 'z'; ch++) {
                        //一开始我TM直接StringBuilder sb = queue.poll()然后在这里修改sb，结果搞半天没发现问题
                        //结果是因为replace修改了原sb,导致整个for循环的sb都被影响了
                        //以后字符串（特别是sb）的修改一定一定要注意！！！
                        String str = sb.replace(j, j + 1, String.valueOf(ch)).toString(); 
                        if(set.contains(str)) {
                            if (str.equals(endWord)) return cnt;
                            queue.offer(str);
                            set.remove(str);
                        }
                    }    
                }
            }
            cnt++;
        }
        return 0;
    }
}
