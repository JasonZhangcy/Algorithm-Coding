/**
 *用队列queue来解决
 *queue增加元素:offer() 提取并移除第一个元素：poll() 只是看但不移除第一个元素：peek()
 * https://blog.csdn.net/ustcjackylau/article/details/42454779
 */
/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    public List<List<Integer>> levelOrder(TreeNode root) {
        List<List<Integer>> res = new ArrayList<List<Integer>>();
        Queue<TreeNode> queue = new LinkedList<TreeNode>(); //注意queue的初始化要用LinkedList
        if (root == null) return res;
        queue.offer(root);
        while (!queue.isEmpty()) {//注意queue也是用isEmpty()来检查是否为空
            List<Integer> list = new ArrayList<Integer>();
            int len = queue.size();
            for (int i = 0; i < len; i++) {
                TreeNode node = queue.poll();
                list.add(node.val);
                if (node.left != null) queue.offer(node.left);
                if (node.right != null) queue.offer(node.right);
            }
            res.add(list);
        }
        return res;
    }
}
