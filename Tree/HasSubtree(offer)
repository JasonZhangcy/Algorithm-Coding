/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/
public class Solution {
    //find the node in tree1 that euqals to root2
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        if(root2 == null) return false;
        boolean flag = false;
        if(root1 != null){
            if(root1.val == root2.val){
                flag = IsSubtree(root1,root2);
                if(!flag)
                    flag = HasSubtree(root1.left,root2);
                if(!flag)
                    flag = HasSubtree(root1.right,root2);
            }
        }
        return flag;
        
    }
    //to find whether tree1 euqals to tree2
    public boolean IsSubtree(TreeNode root1,TreeNode root2){
        if (root1 == null && root2 == null || root1 != null && root2 == null)
            return true;
        if(root1 == null && root2 != null)
            return false;
        if(root1.val != root2.val) return false;
        boolean left = IsSubtree(root1.left,root2.left);
        boolean right = IsSubtree(root1.right,root2.right);
        return left && right;
        //if(left == false || right == false)
            //return false;
        //else
            //return true;
    }
}

