/**
public class TreeNode {
    int val = 0;
    TreeNode left = null;
    TreeNode right = null;

    public TreeNode(int val) {
        this.val = val;

    }

}
*/

public class Solution {
    /**
     *Use DFS to traverse Tree 1
     *Find the same value node of Tree 1 and root of Tree 2
     *Then use IsSubtree to determine whether Tree 2 is subtree of Tree 1
     */
    public boolean HasSubtree(TreeNode root1,TreeNode root2) {
        if(root1 == null || root2 == null) return false;
        if(root1.val == root2.val)
        {
            if(IsSubtree(root1, root2)) return true;
        }
        return HasSubtree(root1.left, root2) || HasSubtree(root1.right, root2);
    }
    
    /**
     *Determine whether Tree 2 is subtree of Tree 1
     */
    public boolean IsSubtree(TreeNode root1, TreeNode root2){
        if(root2 == null) return true; // root2 must be sub-root of root 1 if it is null
        if(root1 == null || root1.val != root2.val) return false;
        return IsSubtree(root1.left, root2.left) && IsSubtree(root1.right, root2.right);
        
    }
}

