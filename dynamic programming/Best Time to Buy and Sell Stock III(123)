/**
 *Solution 1: DP, 时间复杂度: O(k*n^2)
 *k: 最多买卖次数，这里是2，dp[k][i]:买卖次数最多为k并且在i时的最大利润
 *dp(k,i) = max{dp(k,i-1),max{prices(i) - prices(j) + dp(k-1,j-1)}}, 0 <= j < i
 */
class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) return 0;
        int[][] dp = new int[3][prices.length];
        for (int k = 1; k <= 2; k++) {
            for (int i = 1; i < prices.length; i++) {
                int max = Math.max(0, prices[i] - prices[0]); //相当于j = 0时
                for (int j = 1; j < i; j++) {
                    max = Math.max(max, prices[i] - prices[j] + dp[k - 1][j - 1]);
                }
                dp[k][i] = Math.max(dp[k][i - 1], max);
            }
        }
        return dp[2][prices.length - 1];
    }
}

/**
 *Solutio 2: 方程式可以简化为：
 *dp(k,i) = max{dp(k,i-1),prices(i) + max{dp(k-1,j) - prices(j)}}, 0 <= j < i
 *注意到这里的max{dp(k-1,j) - prices(j)都可以由上一个循环得到，因此我们可以降维
 *注意这里是dp(k-1, j)而不是dp(k-1, j - 1)，这样做结果一样，但是可以方便我们的降维
 */
class Solution {
    public int maxProfit(int[] prices) {
        if (prices.length == 0) return 0;
        int[][] dp = new int[3][prices.length];
        for (int k = 1; k <= 2; k++) {
            int max = dp[k - 1][0] - prices[0]; //当j = 0时
            for (int i = 1; i < prices.length; i++) {
                dp[k][i] = Math.max(dp[k][i - 1], prices[i] + max);
                max = Math.max(max, dp[k - 1][i] - prices[i]); //相当于每次循环后要更新max,因为下一个循环的max中的j最多取到当前循环的i
            }
        }
        return dp[2][prices.length - 1];
    }
}
