/**
*时间复杂度：O(n)
*思路：动态规划，如果没有0的麻烦，则用O(i)表示当前下标数字可以组成的组数
*则O(i) = O(i-1) + {O(i-2)}("a[i-1]a[i]" <= 26)
*问题是现在有0的困扰，所以应该先取当前的一位数，以及当前和前一位组成的两位数，再进一步判断
*/
public class Solution {
    public int numDecodings(String s) {
        if(s.length() == 0) return 0;
        int[] dp = new int[s.length()+1];
        dp[0] = 1;
        dp[1] = (s.charAt(0) == '0') ? 0 : 1;
        //i表示dp里面的下标，所以i-1才是目前s里面的下标
        for(int i = 2; i <= s.length(); i++){
            int one_digit = Integer.valueOf(s.substring(i-1,i)); //取当前一位数
            int two_digit = Integer.valueOf(s.substring(i-2,i)); //当前一位数和前一位数组成的两位数
            //dp[i]初始值为0
            if(one_digit >= 1 && one_digit <= 9){
                dp[i] += dp[i-1];
            }
            if(two_digit >= 10 && two_digit <= 26){
                dp[i] += dp[i-2];
            }
        }
        return dp[s.length()];
    }
}
