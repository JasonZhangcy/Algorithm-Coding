/**
* 时间复杂度：O(n)
* 思路：乘法中有可能现在看起来小的一个负数，后面跟另一个负数相乘就会得到最大的乘积
* 所以，保留【当前最大连续乘积】以及【当前最小连续乘积】
* 注意，如果A[i]的值比乘出来的local_max要大（或者比乘出来的local_min要小），就要替换成新的起点
* !!这题动态规划的思路是：保留【当前最X连续数】--这也就看出动态规划另一种思路：1.“以A[i]作为最后节点”的思路 2.背包类型 3.当前最XX的局部值
* 我觉得这里本质上也是"以A[i]作为最后节点的连续最大/最小值"
*/
class Solution {
    public int maxProduct(int[] nums) {
        if(nums.length == 0) return 0;
        int local_max = nums[0], local_min = nums[0], global_max = nums[0];
        for(int i = 1; i < nums.length; i++){
            int tmp1 = local_max * nums[i];
            int tmp2 = local_min * nums[i];
            local_max = Math.max(nums[i],Math.max(tmp1,tmp2));
            local_min = Math.min(nums[i],Math.min(tmp1,tmp2));
            global_max = Math.max(local_max,global_max);
        }
        return global_max;
    }
}

/**
* 另一种思路：以0作为一轮的节点，然后“无脑乘”，直接比较乘出来的结果
* 要比较的是第一个数开始的连乘以及第一个负数之后开始的连乘
* 把下面的做法跟我最近自己写的做法比较一下，体会其中的差别
*/
class Solution {
    public int maxProduct(int[] nums) {
        int max = Integer.MIN_VALUE, front = 1;
        Integer back = null;
        for(int i = 0; i < nums.length; i++){
            if(nums[i] == 0){
                back = null;
                front = 1;
                max = Math.max(max,0);
            }else{
                front *= nums[i];
                max = Math.max(max,front); //每次都保留好max值
                if(back != null){
                    back *= nums[i];
                    max = Math.max(max,back);
                }
                if(nums[i] < 0 && back == null){
                    back = 1;
                }
            }
        }
        return max;
    }
}
