/**
 *Solution 1
 */
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid.length == 0) return 0;
        int n = obstacleGrid.length, m = obstacleGrid[0].length;
        int[][] dp = new int[n][m];
        dp[n -1][m - 1] = obstacleGrid[n - 1][m - 1] == 1 ? 0 : 1;
        for (int i = n - 1; i >= 0; i--) {
            for(int j = m - 1; j >= 0; j--) {
                if (obstacleGrid[i][j] == 1) dp[i][j] = 0;
                else {
                    if (j + 1 < m) dp[i][j] += dp[i][j + 1]; 
                    if (i + 1 < n) dp[i][j] += dp[i + 1][j];
                }

            }
        }
        return dp[0][0];
    }
}

/**
 *Solution 2: 思路跟上面一样的，只不过我们只保存一维数组
 *We only need to use value at dp[i - 1][j] and dp[i][j - 1] to update dp[i][j]
 *So we update data by using dp[j] = dp[j] + dp[j - 1]
 *Where here dp[j] corresponding to the dp[i - 1][j]) and dp[j - 1] corresponding to the dp[i][j - 1] in the 2D array
 *
class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        if (obstacleGrid.length == 0) return 0;
        int[] dp = new int[obstacleGrid[0].length];
        dp[0] = 1;
        for (int i = 0; i < obstacleGrid.length; i++) {
            for (int j = 0; j < obstacleGrid[0].length; j++) {
                if (obstacleGrid[i][j] == 1) dp[j] = 0;
                else {
                    if (j > 0) dp[j] += dp[j - 1];
                }
            }
        }
        return dp[obstacleGrid[0].length - 1];
    }
}
