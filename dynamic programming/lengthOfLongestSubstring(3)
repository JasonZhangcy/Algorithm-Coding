/**
*算法复杂度：O(n^2)
*思路：动态规划+HashMap
*用HashMap记录出现过的元素及其位置
*遍历每一个元素，如果这个元素前面没有出现过，则dp[i] = dp[i-1]+1
*如果前面出现过这个元素，则找到上一次出现的位置，求出两者距离d
*如果d <= dp[i-1]，则dp[i] = d
*如果d > dp[i-1],说明两者之前还存在其它重复元素（否则dp[i-1]不可能那么小），所以dp[i] = dp[i-1]+1
*ps:其实这里只需保存dp[i]和dp[i-1]两个值，去掉数组后，程序速度会有极大提高
*/
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0) return 0;
        int max = 1;
        int len = s.length();
        int[] dp = new int[len];
        HashMap<Character,Integer> map = new HashMap<Character,Integer>();
        dp[0] = 1;
        map.put(s.charAt(0),0);
        for(int i = 1; i < len; i++){
            char ch = s.charAt(i);
            if(map.containsKey(ch)){
                int prev = i - 1;
                //其实这里也可以用HashMap记录上一次出现的位置，不必每次遍历
                while(s.charAt(prev) != ch){prev--;}
                int d = i - prev;
                if(d <= dp[i-1])
                    dp[i] = d;
                else
                    dp[i] = dp[i-1] + 1;
                
            }else{
                dp[i] = dp[i-1] + 1;
                map.put(ch,i);
            }
            max = Math.max(max,dp[i]);
        }
        return max;
    }
}

/**
*算法复杂度：O(n)
*思路：用两个指针表示两个字符之间的长度
*用HashMap记录出现过的字符以及上一次出现时的位置
*第一个指针用于遍历数组，如果出现过这个字符，则移动第二个指针
*用第二个指针的当前位置与上一次出现该字符时的位置比较，取较大者（此举是为保证两个指针之间没有重复元素）
*同时第二个指针只能向前，不能往后退，因为如果往后退的话，两指针之间会存在重复元素
*/
public class Solution {
    public int lengthOfLongestSubstring(String s) {
        if(s.length() == 0) return 0;
        int max = 0;
        HashMap<Character,Integer> map = new HashMap<Character,Integer>();
        for(int i = 0,j = 0; i < s.length(); i++){
            char ch = s.charAt(i);
            if(map.containsKey(ch))
                //map.get(ch)如果小于j，则i与map.get(ch)之间必定存在其它重复元素，否则j就应该在更前的位置
                j = Math.max(j,map.get(ch)+1);
            max = Math.max(max,i-j+1);
            map.put(ch,i);
        }
        return max;
    }
}







