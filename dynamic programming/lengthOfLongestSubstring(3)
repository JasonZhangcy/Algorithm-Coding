/**
*算法复杂度：O(n)
*思路：动态规划+HashMap
*dp[i]表示以i字符结尾的subtring的最大长度
*/
class Solution {
    public int lengthOfLongestSubstring(String s) {
        if (s.length() == 0 || s == null) return 0;
        int max = 1;
        int[] dp = new int[s.length()];
        HashMap<Character, Integer> map = new HashMap<Character, Integer>();
        dp[0] = 1;
        map.put(s.charAt(0), 0);
        for (int i = 1; i < s.length(); i++) {
            char ch = s.charAt(i);
            //如果第一次出现ch或者两次出现ch的位置之差大于dp[i]，则dp[i]可以直接+1
            if (!map.containsKey(ch) || i - map.get(ch) > dp[i-1]) 
                dp[i] = dp[i-1] + 1;
            else 
                dp[i] = i - map.get(ch);
            map.put(ch, i);
            max = Math.max(max, dp[i]);
        }
        return max;
    }
}

/**
*算法复杂度：O(n)





