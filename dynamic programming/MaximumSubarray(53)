/**
*时间复杂度:O(n)
*思路：动态规划。这题显然是最优解问题，这时候都应该优先想起动态规划的方法。
*这里一般有两种思路：
*一种是背包问题的思路：第i个item放与不放（选择或不选择）
*第二种：以第i个item为终结点来解（第i个item一定选）
*这题以第二种的思路为解:O(i)表示以第i个数为结点的最大连续sum，则:
*O(i) = O(i-1) + a(i), O(i-1) > 0
      = a(i), O(i-1) <= 0
*这题有个小优化，由于我们只需要保存O(i-1)这个数，所以并不需要一整个数组，只要用一个变量dp来记录O(i-1)即可
*/
public class Solution {
    public int maxSubArray(int[] nums) {
        if(nums == null || nums.length == 0) return -1;
        int dp = nums[0];
        int max = dp;
        for(int i = 1; i < nums.length; i++){
            if(dp > 0)
                dp += nums[i];
            else
                dp = nums[i];
            max = Math.max(dp,max);
        }
        return max;
    }
}
