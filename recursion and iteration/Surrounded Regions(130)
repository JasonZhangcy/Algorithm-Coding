/**
 *Solution 1: 递归，本质是DFS
 */
class Solution {
    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0) return;
        int len = board.length, width = board[0].length;
        for (int i = 0; i < len; i++) {//遍历第1列和最后一列
            if (board[i][0] == 'O') helper(board, i, 0);
            if (board[i][width - 1] == 'O') helper(board, i, width - 1);
        }
        for (int j = 0; j < width; j++) {//遍历第一行和最后一行
            if (board[0][j] == 'O') helper(board, 0, j);
            if (board[len - 1][j] == 'O') helper(board, len - 1, j);
        }
        for (int i = 0; i < len; i++) {
            for (int j =0; j < width; j++) {
                if (board[i][j] == 'O') board[i][j] = 'X';
                if (board[i][j] == '*') board[i][j] = 'O';
            }
        }
    }
    public void helper(char[][] board, int i, int j) {
        //注意这种不管什么情况先进到下一轮方法，由下一轮的条件判断来筛选掉不满足的情况，这样可以使代码很简洁
        if (i < 0 || i >= board.length || j < 0 || j >= board[0].length ||
            board[i][j] == 'X' || board[i][j] == '*') return;
        board[i][j] = '*';
        helper(board, i - 1, j);
        helper(board, i + 1, j);
        helper(board, i, j - 1);
        helper(board, i, j + 1);
    }
}

/**
 *Solution 2: 利用queue的iteration,本质是BFS
 */
class Solution {
    public void solve(char[][] board) {
        if (board.length == 0 || board[0].length == 0) return;
        int len = board.length, width = board[0].length;
        int[][] direction = {{1,0}, {-1, 0}, {0, 1}, {0, -1}};
        Queue<Point> q = new LinkedList<Point>();
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < width; j++) {
                //注意这里把4个行列的循环都放一起了！！牛皮！！
                if (board[i][j] == 'O' && (i == 0 || i == len - 1 || j == 0 || j == width - 1)) {
                    board[i][j] = '*';
                    q.offer(new Point(i, j));
                    while (!q.isEmpty()) {
                        Point point = q.poll();
                        for (int k = 0; k < 4; k++) {
                            int x = point.x + direction[k][0];
                            int y = point.y + direction[k][1];
                            if (x >= 0 && x <= len - 1 && y >= 0 && y <= width - 1 && board[x][y] == 'O') {
                                //注意这里一定要先设为'*'，否则后面queue取出来再遍历4个方向的时候可能会和queue已有的元素起冲突
                                board[x][y] = '*'; 
                                q.offer(new Point(x, y));
                            }
                        }
                    }
                }                
            }
        }
        for (int i = 0; i < len; i++) {
            for (int j = 0; j < width; j++) {
                if (board[i][j] == '*') board[i][j] = 'O'; 
                else if (board[i][j] == 'O') board[i][j] = 'X'; //如果这里不加else，那么会相当于'*' -> 'X' !!
            }
        }
    }
}
class Point {
    int x,y;
    public Point(int x, int y) {
        this.x = x;
        this.y = y;
    }
}
