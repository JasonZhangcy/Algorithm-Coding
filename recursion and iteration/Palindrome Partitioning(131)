/**
*思路：穷举法，利用递归遍历出所有可能的情况：先判断 a[start,i]是否回文串，若是，则对后半段继续递归下去；若不是，则返回
*注意，这题主要耗时在每一次都要判断当前字符串是否回文串，所以可以先利用动态规划，若dp[i,j]是回文串，则记录为true
*/
public class Solution {
    List<List<String>> res = new ArrayList();
    public List<List<String>> partition(String s) {
        backtrack(s,new ArrayList(),0);
        return res;
    }
    public void backtrack(String s, List<String> curList, int start){
        if(start >= s.length()){
            res.add(curList);
            return;
        }
        for(int i = start; i <= s.length()-1; i++){
            if(isPalindrome(s,start,i)){
                List<String> next = new ArrayList<String>(curList);
                next.add(s.substring(start,i+1));
                backtrack(s,next,i+1);
            }
        }
    }
    public boolean isPalindrome(String s, int left, int right){
        if(left > right) return false;
        while(left <= right){
            if(s.charAt(left) != s.charAt(right)) return false;
            left++;
            right--;
        }
        return true;
    }
}

/**DP+DFS的版本**/
public class Solution {
    public List<List<String>> partition(String s) {
        List<List<String>> res = new ArrayList<String>();
        boolean[][] dp = new boolean[s.length()][s.length()];
        for(int i = 0; i < s.length(); i++) {
            for(int j = i; j >= 0; j--) {
                //i - j <= 1 为了应对i == j 以及 j = i + 1两种特殊情况
                if(s.charAt(i) == s.charAt(j) && (i - j <= 1 || dp[j+1][i-1])) {
                    dp[j][i] = true;
                }
            }
        }
        helper(res, new ArrayList<String>(), dp, s, 0);
        return res;
    }
    
    private void helper(List<List<String>> res, List<String> path, boolean[][] dp, String s, int pos) {
        if(pos == s.length()) {
            res.add(new ArrayList<String>(path)); //因为是用了remove的方法，所以要new ArrayList<String>(path)
            return;
        }
        
        for(int i = pos; i < s.length(); i++) {
            if(dp[pos][i]) {
                path.add(s.substring(pos,i+1));
                helper(res, path, dp, s, i+1);
                path.remove(path.size()-1); //用了remove的方法
            }
        }
    }
}
