/**
*思路：先排序，用一个数组记录当前path访问过的变量，同时skip相同值
*/
public class Solution {
    List<List<Integer>> res = new ArrayList();
    public List<List<Integer>> permuteUnique(int[] nums) {
        Arrays.sort(nums);
        boolean[] used = new boolean[nums.length];
        Backtrack(new ArrayList(),nums,used);
        return res;
    }
    public void Backtrack(List<Integer> curList, int[] nums,boolean[] used){
        if(curList.size() == nums.length){
            res.add(new ArrayList(curList));
            return;
        }
        for(int i = 0; i < nums.length; i++){
            //如果用过该值就skip（因为是从0开始遍历）
            if(used[i]) continue;
            //如果当前值与前一个相同，并且前一个used为false,则skip(如果前一个为false说明当前值与前一个值为同一层，要skip；如果不是false则不同层，不应该skip)
            if(i > 0 && nums[i] == nums[i-1] && !used[i-1]) continue;
            curList.add(nums[i]);
            used[i] = true;
            Backtrack(curList,nums,used);
            used[i] = false;
            curList.remove(curList.size()-1);
        }
    }
}
