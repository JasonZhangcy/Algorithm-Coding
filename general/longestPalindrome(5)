/**
*Solution 1
*时间复杂度：O(n * longestLen)
*思路：寻找以【当前i】【结尾】的字符串的最大回文串
*设最长回文串长度为longestLen
*当前i结尾的最大回文串【只可能】是(i-longestLen,i)以及（i-longestLen-1,i）
*首先大于i-longestLen的下标显然不用检查
*其次，设x>=2,如果(i-longestLen-x,i)是最长回文串，则实际最长回文串肯定比当前值大，这是不可能的（自己举例看看）
*/
public class Solution {
    public String longestPalindrome(String s) {
        if(s.length() == 0) return "";
        int longestLen = 0;
        String str = "";
        for(int i = 0; i < s.length(); i++){
            if(isPalindromic(s,i-longestLen-1,i)){
                str = s.substring(i-longestLen-1,i+1);
                longestLen = longestLen + 2;
            }
            if(isPalindromic(s,i-longestLen,i)){
                str = s.substring(i-longestLen,i+1);
                longestLen++;
            }
        }
        return str;
    }
    public boolean isPalindromic(String s, int start, int end){
        if(start < 0) return false;
        int low = start, high = end;
        while(low <= high){
            if(s.charAt(low++) != s.charAt(high--))
                return false;
        }
        return true;
    }
} 

/**
 *Solution 2
 *动态规划：如果字符串s(j,i)为回文串，则dp[j][i]为true
 *如果dp[j+1][i-1]为true并且s.charAt(j) == s.charAt(i)，则dp[j][i]为true
 */
class Solution {
    public String longestPalindrome(String s) {
        if (s.length() == 0 || s == null) return "";
        boolean[][] dp = new boolean[s.length()][s.length()];
        String result = "";
        for (int i = 0; i < s.length(); i++) {
            for (int j = 0; j <= i; j++) {
                if (s.charAt(i) == s.charAt(j) && (i - j <= 2 || dp[j+1][i-1])) {
                    dp[j][i] = true;
                    if (i - j + 1 > result.length() {
                        result = s.substring(j, i + 1);
                    }
                } 
            }
        }
        return result;
    }
}
 
 
 
 
