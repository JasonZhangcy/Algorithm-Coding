/**
 *思路：寻找目前能跳的最远距离，一旦到达edge,则跳的次数+1， 然后更新edge
 *
 *@param edge 上一阶段能跳的最远距离，一旦i到达edge,cnt就要+1
 *@param curLongest 目前能跳的最远距离
 *@cnt 跳的次数
 */
class Solution {
    public int jump(int[] nums) {
        int edge = 0, curLongest = 0, cnt = 0;
        for (int i = 0; i < nums.length - 1; i++) {
            curLongest = Math.max(curLongest, i + nums[i]);
            if (i == edge) {
                cnt++;
                edge = curLongest;
            }
        }
        return cnt;
    }
}
