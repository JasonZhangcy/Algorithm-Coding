/**
*时间复杂度:O(k^2)
*思路：杨辉三角等式就是：该行O(j) = 上一行（O(j) + O(j-1))
*如果只能用一行来记录结果，从前往后遍历会覆盖上一行的结果，而从后往前遍历则不会
*注意，如果以后动态规划遇到空间复杂度有要求，而且【该行】结果是由【上一行】决定的，可以考虑这个从后往前遍历的技巧
*如果是O(n)复杂度的题，该行结果由该行决定则不用这么麻烦（例如斐波拉契数列）
*/
public class Solution {
    public List<Integer> getRow(int rowIndex) {
        List<Integer> res = new ArrayList();
        if(rowIndex < 0) return res;
        res.add(1);
        for(int i = 1; i <= rowIndex; i++){
            for(int j = res.size() - 1; j > 0; j--){
                res.set(j,res.get(j)+res.get(j-1));
            }
            //在行末加上1，则该行完成
            res.add(1);
        }
        return res;
    }
}
