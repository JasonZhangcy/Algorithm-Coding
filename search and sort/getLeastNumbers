import java.util.ArrayList;
public class Solution {
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> array = new ArrayList<Integer>();
        if (input.length == 0 || input == null) return array;
        if (k > input.length || k == 0) return array;
        int left = 0, right = input.length - 1;
        int index = patition(input, left, right);
        while (index != k - 1) {
            if (index > k - 1)
                right = index - 1;
            else 
                left = index + 1;
            index = patition(input, left, right);
        }
        for (int i = 0; i < k; i++) {
            array.add(input[i]);
        }
        return array;
    }
    public int patition (int[] input, int low, int high) {
        int index = (int)(Math.random() * (high - low + 1)) + low;
        int pivot = input[index];
        mySwap(input, low, index);
        int left = low, right = high;
        while (left < right){
            while (left < right && input[right] > pivot) right--;
            while (left < right && input[left] <= pivot) left++;
            mySwap(input, left, right);
        }
        mySwap(input, left, low);
        return left;
    }
    public void mySwap (int[] input, int index1, int index2) {
        int tmp = input[index1];
        input[index1] = input[index2];
        input[index2] = tmp;
    }
}

import java.util.ArrayList;
public class Solution {//recursion version
    public ArrayList<Integer> GetLeastNumbers_Solution(int [] input, int k) {
        ArrayList<Integer> array = new ArrayList<Integer>();
        if(input.length < k || k == 0)
            return array;
        getLeastNumbers(input,k,0,input.length-1);
        for (int i = 0; i < k; i++){
            array.add(input[i]);
        }
        return array;
    }
    public void getLeastNumbers(int[] array, int remain,int low,int high){
        if(low >= high) return;
        if(low-high+1 == remain) return;
        int po = Patition(array,low,high);
        if(po-low+1 == remain) return;
        else if(po-low+1 > remain)
            getLeastNumbers(array,remain,low,po-1);
        else
            getLeastNumbers(array,remain-(po-low+1),po+1,high);
    }
    public int Patition(int[] array,int start,int end){
        int po = (int)(Math.random()*(end-start+1)) + start;
        Swap(array,po,start);
        int pivot = array[start];
        int left = start, right = end;
        while(left < right){
            while(array[right] > pivot && left < right){right--;}
            array[left] = array[right];
            while(array[left] <= pivot && left < right){left++;}
            array[right] = array[left];
        }
        array[left] = pivot;
        return left;
    }
    public void Swap(int[] array, int a, int b){
        int tmp = array[a];
        array[a] = array[b];
        array[b] = tmp;
    }
}

