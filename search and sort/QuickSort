public static void qSort(int[] array){
	quickSort(array,0,array.length-1);
}
public static void quickSort(int[] array,int left,int right){
	if(left >= right) return;
	int p = Patition(array,left,right);
	quickSort(array,left,p-1);
	quickSort(array,p+1,right);
}
/**
*solution1
*/
public static int Patition(int[] array,int left,int right){
	//选数组第一个元素为基准点
	//int pivot = left;
	
	//或者选随机数作为基准点
	int po = (int)(Math.random()*(right-left+1))+left;
	int pivot = array[po];
	Swap(array,po,left); // 交换位置是为了确定pivot的位置，方便后面将pivot放到“中心点”
	int low = left, high = right;
	while(low < right){
		while(low < high && array[high] > pivot) 
			high--;
		while(low < high && array[low] <= pivot)
			low++;
		if(low < high)
			Swap(array, low, high);
	}
	//important!! 因为pivot的位置一直在left上没变过,同时退出循环时low所指的是最后一个<=pivot的元素，所以最后必须把pivot调整到“中心点”上
	Swap(array, left, low); 
	return low; // “中心点”所在位置 
}

/**
*solution2
*/
public static int Patition(int[] array,int left,int right){
	//思想:把大的元素复制到左边，把小的元素复制到右边
	//每次大循环结束后，low所指的元素其实是多余的，因为它所指的元素（元素值大于pivot）复制给了当前high所指的元素
	//所以最后把pivot赋予low所指的元素
	int po = (int)(Math.random()*(right-left+1)) + left;
    	Swap(array,po,left);
    	int pivot = array[left];
    	int low = left, high = right;
    	while(low < high){
        	while(array[high] > pivot && low < high){high--;}
        	array[low] = array[high];
        	while(array[low] <= pivot && low < high){low++;}
        	array[high] = array[low];
    	}
    	array[low] = pivot;
    	return low;
}
public static void Swap(int[] array,int a, int b){
	int tmp = array[a];
	array[a] = array[b];
	array[b] = tmp;
}

 

               





  


