public class QuickSort {
	public static void main(String args[])
	{
		int[] m = {5,9,8,6,2,1,3,5,6};
		qSort(m);
		for(int i : m){
			System.out.println(i);
		}
			
	}
	public static void qSort(int[] array){
		quickSort(array,0,array.length-1);
	}
	public static void quickSort(int[] array,int left,int right){
		if(left >= right) return;
		int p = Patition(array,left,right);
		quickSort(array,left,p-1);
		quickSort(array,p+1,right);
	}
	public static int Patition(int[] array,int left,int right){
//		//选数组第一个元素为基准点
//		int p = left;
		
//		//选随机数作为基准点
//		int p = (int)(Math.random()*(right-left+1))+left;
//		Swap(array,p,left);
//		p = left;
//		
//		int a = left;
//		int b = right;
//		while(true){
//			while(array[a] <= array[p] && a < b){a++;}
//			//不加&&a<b判断是因为保证最后退出循环时b所指的元素是最后一个小于等于array[p]的元素
//			while(array[b] > array[p]){b--;}
//			if(a >= b) break;
//			Swap(array,a,b);
//		}
//		Swap(array,p,b);
//		return b;
		
		//another implementation
		//思想是其实一个指针所指的元素是多余的（场上存在两个相同的元素）
		int po = (int)(Math.random()*(right-left+1)) + left;
        	Swap(array,po,left);
        	int pivot = array[left];
        	int low = left, high = right;
        	while(low < high){
            		while(array[high] > pivot && low < high){high--;}
            		array[low] = array[high];
            		while(array[low] <= pivot && low < high){low++;}
            		array[high] = array[low];
        	}
        	array[low] = pivot;
        	return low;
	
	}
	public static void Swap(int[] array,int a, int b){
		int tmp = array[a];
		array[a] = array[b];
		array[b] = tmp;
	}
}

 

 





  


