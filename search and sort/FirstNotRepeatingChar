public class Solution {//solution 1
    //by array
    //字符是8位的，所以其实可以开一个256长度的数组，这里没必要，因为只有字母
    public int FirstNotRepeatingChar(String str) {
       	int[] alphabet =  new int[100];
        for(int i = 0; i < 100;i++)
            alphabet[i] = 0;
        for (int i = 0; i < str.length();i++){
            char c = str.charAt(i);
            alphabet[c-'A']++;
        }
        for(int i = 0; i < str.length();i++){
            char c = str.charAt(i);
            if(alphabet[c-'A']==1){
               return i;
            }
        }
        return -1;
    }
}

import java.util.HashMap;
import java.util.Hashtable;
public class Solution {//solution 2
    //by hashmap
    public int FirstNotRepeatingChar(String str) {
        int po = -1;
        HashMap<String,Integer> m = new HashMap<String,Integer>();
        for(int i = 0; i < str.length();i++){
            String key = String.valueOf(str.charAt(i));
            if(m.get(key) != null)
                m.put(key,m.get(key)+1);
            else
                m.put(key,1);
        }
        for(int i = 0;i < str.length();i++){
            String key = String.valueOf(str.charAt(i));
            if(m.get(key) == 1){
                return i;
            }
        }
        return -1;
    }
}
