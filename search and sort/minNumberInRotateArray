import java.util.ArrayList;
public class Solution {
    /**
     *思想：二分查找
     *控制左指针在左“递增”序列，右指针在右“递增”序列
     */
    public int minNumberInRotateArray(int [] array) {
        if(array.length == 0 || array == null) return 0;
        int left = 0, right = array.length  - 1, mid = (left + right) / 2;
        if(array[right] > array[left]) return array[0];  // 如果一开始就是“递增”序列则只直接返回第一个数
        while(right - left != 1){//保证最后左指针指向左区域最后一个元素，右指针指向右区域第一个元素
            mid = (left + right) / 2;
            if(array[mid] == array[left] && array[mid] == array[right]) return findMinBySequentialSearch(array);
            if(array[mid] >= array[left]) left = mid; 
            if(array[mid] <= array[right]) right = mid; 
            //分别注意是>=array[left]和<=array[right]，因为要符合“控制两指针在两个区域”的逻辑；
            //另外注意这里不能使用left = mid - 1, right = mid + 1, 否则最后指针会溢出区域
        }
        return array[right];
    }
    /**
     *顺序查找
     */
    public int findMinBySequentialSearch(int[] array){
        int min = array[0];
        for(int num : array){
            min = Math.min(min, num);
        }
        return min;
    }
}
 





