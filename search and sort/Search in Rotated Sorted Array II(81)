/**
*时间复杂度：O(n)
*思路：先判断a[mid],a[right],a[left]是否相等，如果相等，则不能用二分法，直接线性搜索
*如果a[mid] >= a[left]，则mid在左递增区间，此时再分析target的位置
*a[mid] < a[left]也一样
*/
public class Solution {
    public boolean search(int[] nums, int target) {
        int left = 0, right = nums.length-1;
        while(left <= right){
            int mid = (left + right) / 2;
            if(nums[mid] == target) return true;
            if(nums[mid] == nums[left] && nums[mid] == nums[right]){
                return searchByOrder(nums,target,left,right);
            //其实这里有个tricky的地方，当nums[mid] = nums[left]的时候，mid不一定在左递增区间，也有可能在右边（自己画下图，当上一个mid在右边时）
            //但是即使是这种情况，由于分析target时的情况是一样的，所以刚好掩盖了这种错误
            }else if(nums[mid] >= nums[left]){
                if(target >= nums[left] && target < nums[mid])
                    right = mid - 1;
                else 
                    left = mid + 1;
            }else{
                if(target <= nums[right] && target > nums[mid])
                    left = mid + 1;
                else
                    right = mid - 1;
            }
        }
        return false;
    }
    public boolean searchByOrder(int[] nums, int target,int left, int right){
        for(int i = left; i <= right; i++){
            if(nums[i] == target)
                return true;
        }
        return false; 
    }
}

/**
*时间复杂度:O(n)
*思路跟上面基本类似，但是判断条件稍变
*/
public class Solution {
    public boolean search(int[] nums, int target) {
        int left = 0, right = nums.length-1;
        while(left <= right){
            int mid = (left + right) / 2;
            if(nums[mid] == target) return true;
            if(nums[mid] > nums[left]){ //在左递增区间
                if(target >= nums[left] && target < nums[mid])
                    right = mid - 1;
                else 
                    left = mid + 1;
            }else if(nums[mid] < nums[left]){ //在右递增区间，注意这里的nums[left]不能改为nums[right]，否则会出错，例子：[3,1,1],3
                if(target <= nums[right] && target > nums[mid])
                    left = mid + 1;
                else
                    right = mid - 1;
            }else
                left++; //nums[mid] == nums[left]
        }
        return false;
    }
}


