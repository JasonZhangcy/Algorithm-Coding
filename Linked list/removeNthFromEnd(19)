/**
*思路：递归
*先遍历到链表尾部，递归返回第k层，若k=n+1则连接node.next.next
*这种要求从链表尾部开始的题目都可以考虑递归
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null) return null;
        ListNode node = new ListNode(1);
        node.next = head;
        int k = recursiveRemove(node,n);
        return node.next;
    }
    public int recursiveRemove(ListNode node, int n){
        if(node == null) return 1;
        int k = recursiveRemove(node.next,n);
        if(k == n + 1)
            node.next = node.next.next;
        return k + 1;
    }
}

/**
*思路：链表快慢指针的【距离差】问题
*这里slow很巧妙的设计成结束时与fast相差n个node，而不是slow“踩在”倒数第n个node上
*这样设计是为了可以利用slow.next = slow.next.next删掉倒数第n个node
*指针dummy设计得也很巧妙，可以感受一下
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        if(head == null) return null;
        ListNode dummy = new ListNode(-1);
        ListNode slow = dummy;
        ListNode fast = dummy;
        dummy.next = head;
        for(int i = 1; i <= n + 1; i++){//先让fast走n+1步，使其与slow相距n
            fast = fast.next;
        }
        while(fast != null){
            fast = fast.next;
            slow = slow.next;
        }
        slow.next = slow.next.next;
        return dummy.next;
    }
}
